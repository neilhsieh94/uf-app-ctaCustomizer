{
  "account_code_blocks": [
    {
      "code": "_SAMPLE_MANIFEST",
      "name": "sample_manifest",
      "content": "<script> console.log('**SAMPLE MANIFEST OUTPUT TEST**'); console.log('Text Spacing: {{text_spacing_val}}'); console.log('Textbox Example: {{textbox_example}}'); console.log('Number Example: {{number_example}}'); console.log('Toggle Example: {{toggle_example}}'); console.log('Debug Example: {{debug_mode}}'); </script><script>\"use strict\";function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function _unsupportedIterableToArray(t,e){if(t){if(\"string\"==typeof t)return _arrayLikeToArray(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===r&&t.constructor&&(r=t.constructor.name),\"Map\"===r||\"Set\"===r?Array.from(t):\"Arguments\"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}}function _iterableToArray(t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,a=new Array(e);r<e;r++)a[r]=t[r];return a}var specificFormCtaFlag=!1,specificFormCtaArr=[],specificCtaFlag=!1,specificCtaArr=[],ctaCustomizer=function(){if(console.log(\"cta customizer is running\"),console.log(\"Text spacing toggle liquid: \",\"{{ text_spacing_toggle }}\",\"{{ text_spacing_val }}\"),document.querySelector(\".cta\")){var t=[],e=function(t,e){_toConsumableArray(t.querySelectorAll(\".cta-field-name\")).forEach(function(t){console.log(\"placeholder\",t.textContent.trim());var r=t.textContent.trim();if(e.includes(r)){var a=\"{{ form_cta_label_text }}\"[e.indexOf(r)][1],n=t.cloneNode();n.textContent=a,n.classList.remove(\"cta-field-name\"),n.classList.add(\"cta-field-name-clone\"),t.insertAdjacentElement(\"afterend\",n),t.style.display=\"none\"}})},r=function(t){console.log(\"is true and enableing text spacing\"),console.log(\"cta is \",Boolean(t)),[].concat(_toConsumableArray(t.querySelectorAll(\"p\")),_toConsumableArray(t.querySelectorAll(\"a\")),_toConsumableArray(t.querySelectorAll(\"span\")),_toConsumableArray(t.querySelectorAll(\"input\"))).forEach(function(t){t.style.letterSpacing=\"{{ text_spacing_val }}px\"})},a=function(t){t.querySelector(\".cta-button\").style.borderRadius=\"{{ button_corner_val }}\"},n=function(t){t.querySelector(\".cta-button\").style.fontSize=\"{{ font_size_val }}\"},o=function(t){t.querySelector(\".cta-button\").style.padding=\"{{ button_padding_val }}\"},l=function(t,e){var r=e.split(\"{{ multi_level_symbol_val }}\"),a=t.querySelector(\"p\");a.innerText=\"\",r.forEach(function(t,e){var r=document.createElement(\"span\");r.innerText=t,r.style.display=\"block\";var n=\"10px\";\"{{ multi_level_text_val }}\"[e]&&(\"{{ multi_level_text_val }}\"[e][0]&&(r.style.fontSize=\"{{ multi_level_text_val }}\"[e][0]),\"{{ multi_level_text_val }}\"[e][1]&&(r.style.fontWeight=\"{{ multi_level_text_val }}\"[e][1]),\"{{ multi_level_text_val }}\"[e][2]&&(n=\"{{ multi_level_text_val }}\"[e][2])),r.style.marginBottom=n,a.appendChild(r)})};if(document.querySelector(\".cta\")){specificCtaArr.length?specificCtaArr.forEach(function(e){document.querySelector(\".cta[data-cta-id='\".concat(e,\"']\"))&&t.push(document.querySelector(\".cta[data-cta-id='\".concat(e,\"']\")))}):t=_toConsumableArray(document.querySelectorAll(\".tile.cta\")),t.forEach(function(t){if(t.classList.contains(\"cta-website\")&&r(t),t.classList.contains(\"cta-website\")&&a(t),t.classList.contains(\"cta-website\")&&n(t),t.classList.contains(\"cta-website\")&&o(t),t.classList.contains(\"cta-website\")){var e=t.querySelector(\"p\").innerText||t.querySelector(\".run-away p\").innerText;\"{{ multi_level_symbol_val }}\".length&&e.includes(\"{{ multi_level_symbol_val }}\")&&l(t,e)}});var c=[];if(specificFormCtaFlag?specificFormCtaArr.forEach(function(t){document.querySelector(\".cta[data-cta-id='\".concat(t,\"']\"))&&c.push(document.querySelector(\".cta[data-cta-id='\".concat(t,\"']\")))}):c=_toConsumableArray(document.querySelectorAll(\".tile.cta-form\")),\"{{ form_cta_label_text }}\".length){var i=\"{{ form_cta_label_text }}\".map(function(t){return t[0]});c.forEach(function(t){t.querySelector(\".cta-field-name\")&&e(t,i)})}\"{{ form_cta_label_text }}\".length&&c.forEach(function(t){t.addEventListener(\"click\",function(){t.querySelector(\".cta-field-name\")&&setTimeout(function(){if(\"{{ labelPlaceholder }}\".length){var r=\"{{ labelPlaceholder }}\".map(function(t){return t[0]});e(t,r)}},250)})})}}};ctaCustomizer();</script>",
      "placement_code": "BODY_BOTTOM",
      "description": "This is a sample manifest outputting fields to the console"
    }
  ],
  "config_fields": [
    {
      "code": "_SPECIFIC_CTA_TOGGLE",
      "name": "specifc_cta_toggle",
      "label": "Toggle to only target specific CTA(s)",
      "ordinal": 0,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, only the below entered IDs will be targeted. If disabled, ALL CTAs will be targeted with the CTA customizations"
    },
    {
      "code": "_SPECIFIC_CTA_ARRAY",
      "name": "specific_cta_array",
      "ordinal": 1,
      "label": "List of CTA IDs",
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "Entered IDs will apply the below customizations to said CTAs",
      "control_props": {
        "placeholder": "Enter ID's separated by commas, ie: 12345, 23456"
      }
    },
    {
      "code": "_TEXT_SPACING_TOGGLE",
      "name": "text_spacing_toggle",
      "label": "Enable Letter Spacing",
      "ordinal": 2,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, the letters of CTA tiles will have letter spacing based on values set below"
    },
    {
      "code": "_TEXT_SPACING_OMIT_FORM_TOGGLE",
      "name": "text_spacing_omit_form_toggle",
      "label": "Omit text spacing for all form CTAs",
      "ordinal": 3,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, text spacing will be omitted for all form CTAs"
    },
    {
      "code": "_CTA_TEXT_SPACING",
      "name": "text_spacing_val",
      "ordinal": 4,
      "label": "Letter Spacing Value (px)",
      "category": "integrations",
      "control_type": "number",
      "scopes": ["hub", "account"],
      "description": "Enter the Letter Spacing Value"
    },
    {
      "code": "_FONT_SIZE_TOGGLE",
      "name": "font_size_toggle",
      "label": "Enable custom font size",
      "ordinal": 5,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, button font sizes will be applied based on values set below. NOTE: Check CTA on multiple window sized to ensure font size selected work on all page sizes"
    },
    {
      "code": "_FONT_SIZE_OMIT_FORM_TOGGLE",
      "name": "font_size_omit_form_toggle",
      "label": "Omit custom font sizes for form CTAs",
      "ordinal": 6,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, custom button font size will be omitted for all form CTAs"
    },
    {
      "code": "_FONT_SIZE_VAL",
      "name": "font_size_val",
      "label": "Font size value (px)",
      "ordinal": 7,
      "category": "integrations",
      "control_type": "number",
      "scopes": ["hub", "account"],
      "description": "Set the button font size"
    },
    {
      "code": "_MULTI_LEVEL_TEXT_TOGGLE",
      "name": "multi_level_text_toggle",
      "label": "Enable CTA Multi Level Text",
      "ordinal": 8,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, function will check for the symbol provided below and separate the text into its respective levels."
    },
    {
      "code": "_MULTI_LEVEL_TEXT_OMIT_FORM_TOGGLE",
      "name": "multi_level_text_omit_form_toggle",
      "label": "Omit multi level text for form CTAs",
      "ordinal": 9,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, multi level text will be omitted for all form CTAs"
    },
    {
      "code": "_MULTI_LEVEL_TEXT_SYMBOL",
      "name": "multi_level_symbol_val",
      "label": "Multi level text symbol",
      "ordinal": 10,
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "Set the multi level symbol to check for.",
      "control_props": {
        "placeholder": "Enter symbol ie. % or %%"
      }
    },
    {
      "code": "_MULTI_LEVEL_TEXT_VAL",
      "name": "multi_level_text_val",
      "label": "Multi level text customizations",
      "ordinal": 11,
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "Set the multi level font customization parameters (optional).",
      "control_props": {
        "placeholder": "Enter font customizations [['{font size}px', '{font weight}px', '{margin bottom}px']]"
      }
    },

    {
      "code": "_BUTTON_CORNER_TOGGLE",
      "name": "button_corner_toggle",
      "label": "Enable Rounded Button Corners",
      "ordinal": 12,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, the letters of CTA tiles will have letter spacing based on values set below"
    },
    {
      "code": "_BUTTON_CORNER_OMIT_FORM_TOGGLE",
      "name": "button_corner_omit_form_toggle",
      "label": "Omit rounded button corners for all form CTAs",
      "ordinal": 13,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, rounded button corners will be omitted for all form CTAs"
    },
    {
      "code": "_BUTTON_CORNER_VAL",
      "name": "button_corner_val",
      "label": "Button Rounded Corner Radius",
      "ordinal": 14,
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "Set the corner radius of your content tiles using CSS border-radius format",
      "control_props": {
        "placeholder": "10px or 15px 20px"
      },
      "validation": {
        "maxlength": 100
      }
    },

    {
      "code": "_BUTTON_PADDING_TOGGLE",
      "name": "button_padding_toggle",
      "label": "Enable custom padding",
      "ordinal": 15,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, button padding will be applied based on values set below"
    },
    {
      "code": "_BUTTON_PADDING_VAL",
      "name": "button_padding_val",
      "label": "Button sizing value",
      "ordinal": 16,
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "Set the button padding",
      "control_props": {
        "placeholder": "10px or 15px 20px"
      },
      "validation": {
        "maxlength": 100
      }
    },
    {
      "code": "_BUTTON_PADDING_OMIT_FORM_TOGGLE",
      "name": "button_padding_omit_form_toggle",
      "label": "Omit button padding for form CTAs",
      "ordinal": 17,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub", "account"],
      "description": "If enabled, button padding will omitted for all form CTAs"
    },

    {
      "code": "_FORM_CTA_LABEL_TEXT",
      "name": "form_cta_label_text",
      "label": "Enable form CTA label replacement",
      "ordinal": 18,
      "category": "integrations",
      "control_type": "textbox",
      "scopes": ["hub", "account"],
      "description": "If enabled, the function will replace label placeholders with those entered.",
      "control_props": {
        "placeholder": "Enter array of replacements [['Old placeholder', 'New placeholder']]"
      }
    },
    {
      "code": "_DEBUG_MODE",
      "name": "debug_mode",
      "label": "Debug Mode for Developers",
      "ordinal": 19,
      "category": "integrations",
      "control_type": "toggle",
      "scopes": ["hub"],
      "description": "For developer debugging purposes, when enabled check the console logs for detailed info on the operation of this app."
    }
  ]
}
